# Задача "Банковские операции":
# Необходимо создать класс Bank со следующими свойствами:
#
# Атрибуты объекта:
# balance - баланс банка (int)
# lock - объект класса Lock для блокировки потоков.
#
# Методы объекта:
# Метод deposit:
# Будет совершать 100 транзакций пополнения средств.
# Пополнение - это увеличение баланса на случайное целое число от 50 до 500.
# Если баланс больше или равен 500 и замок lock заблокирован - lock.locked(), то разблокировать его методом release.
# После увеличения баланса должна выводится строка "Пополнение: <случайное число>. Баланс: <текущий баланс>".
# Также после всех операций поставьте ожидание в 0.001 секунды, тем самым имитируя скорость выполнения пополнения.
# Метод take:
# Будет совершать 100 транзакций снятия.
# Снятие - это уменьшение баланса на случайное целое число от 50 до 500.
# В начале должно выводится сообщение "Запрос на <случайное число>".
# Далее производится проверка: если случайное число меньше или равно текущему балансу, то произвести снятие, уменьшив balance на соответствующее число и вывести на экран "Снятие: <случайное число>. Баланс: <текущий баланс>".
# Если случайное число оказалось больше баланса, то вывести строку "Запрос отклонён, недостаточно средств" и заблокировать поток методом acquire.
# Далее создайте объект класса Bank и создайте 2 потока для его методов deposit и take. Запустите эти потоки.
# После конца работы потоков выведите строку: "Итоговый баланс: <баланс объекта Bank>".
#
# По итогу вы получите скрипт разблокирующий поток до баланса равному 500 и больше или блокирующий, когда происходит попытка снятия при недостаточном балансе.

import threading
import random
import time


class Bank:
    def __init__(self):
        self.balance = 0
        self.lock = threading.Lock()  # Замок для блокировки потоков

    def deposit(self):
        for _ in range(100):  # Совершаем 100 транзакций пополнения
            amount = random.randint(50, 500)

            # Явно блокируем поток для изменения баланса
            with self.lock:
                self.balance += amount
                print(f'Пополнение: {amount}. Баланс: {self.balance}')

            # Имитируем задержку
            time.sleep(0.001)

    def take(self):
        for _ in range(100):  # Совершаем 100 транзакций снятия
            amount = random.randint(50, 500)
            print(f'Запрос на {amount}')

            # Явно блокируем поток для проверки и изменения баланса
            with self.lock:
                # Проверяем, хватает ли средств для снятия
                if amount <= self.balance:
                    self.balance -= amount
                    print(f'Снятие: {amount}. Баланс: {self.balance}')
                else:
                    print('Запрос отклонён, недостаточно средств')

            # Имитируем задержку
            time.sleep(0.001)

        # Создание объекта банка


bank = Bank()

# Создаём потоки для пополнения и снятия средств
deposit_thread = threading.Thread(target=bank.deposit)
take_thread = threading.Thread(target=bank.take)

# Запускаем потоки
deposit_thread.start()
take_thread.start()

# Ожидаем завершения потоков
deposit_thread.join()
take_thread.join()

# Итоговый баланс
print(f'Итоговый баланс: {bank.balance}')

